class p{defaults;interceptors={request:[],response:[]};constructor(e={}){this.defaults={headers:{"Content-Type":"application/json"},...e}}async request(e,t={}){const s={...this.defaults,...t,headers:{...this.defaults.headers,...t.headers}},a=s.baseURL?new URL(e,s.baseURL).toString():e,i=new URLSearchParams(s.params).toString(),h=i?`${a}?${i}`:a;let r=s;for(const o of this.interceptors.request)r=await o(r);const u=new AbortController,c=r.timeout&&setTimeout(()=>u.abort(`Timeout of ${r.timeout}ms exceeded`),r.timeout);try{const o=await fetch(h,{...r,signal:u.signal,body:r.data?JSON.stringify(r.data):null});clearTimeout(c);let n=o;for(const d of this.interceptors.response)n=await d(n);return n.json()}catch(o){throw o.name==="AbortError"?new Error(o.message||"Request canceled"):o}}get(e,t){return this.request(e,{...t,method:"GET"})}post(e,t,s){return this.request(e,{...s,method:"POST",data:t})}put(e,t,s){return this.request(e,{...s,method:"PUT",data:t})}delete(e,t){return this.request(e,{...t,method:"DELETE"})}patch(e,t,s){return this.request(e,{...s,method:"PATCH",data:t})}head(e,t){return this.request(e,{...t,method:"HEAD"})}options(e,t){return this.request(e,{...t,method:"OPTIONS"})}useRequestInterceptor(e){this.interceptors.request.push(e)}useResponseInterceptor(e){this.interceptors.response.push(e)}}export{p as FetchClient};
